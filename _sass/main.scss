@charset "utf-8";

// Define defaults for each variable.

$base-font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !default;
$base-font-size:   16px !default;
$base-font-weight: 400 !default;
$small-font-size:  $base-font-size * 0.875 !default;
$base-line-height: 1.5 !default;

$spacing-unit:     30px !default;
$half-spacing:     $spacing-unit / 2;
$double-spacing:   $spacing-unit * 2;
$quarter-spacing:  $spacing-unit / 4;

$text-color:       #111 !default;
$background-color: #fdfdfd !default;
$lightbox-background: rgba(0, 0, 0, 0.93);
$brand-color:      #2a7ae2 !default;
$white:            #fff;

$grey-color:       #828282 !default;
$grey-color-light: lighten($grey-color, 40%) !default;
$grey-color-dark:  darken($grey-color, 25%) !default;

$table-text-align: left !default;

// Width of the content area
$content-width:    1200px !default;

$on-palm:          $content-width / 2 !default;
$on-tablet:        $content-width * 0.75;
$on-laptop:        $content-width !default;

// Use media queries like this:
// @include media-query($on-palm) {
//   .wrapper {
//     padding-right: $spacing-unit / 2;
//     padding-left: $spacing-unit / 2;
//   }
// }
@mixin media-query($device) {
  @media screen and (max-width: $device) {
    @content;
  }
}

@mixin relative-font-size($ratio) {
  font-size: $base-font-size * $ratio;
}

@function strip-unit($number){
  @return $number / ($number * 0 + 1);
}

@function rem-multiplier(){
  $base: strip-unit($base-font-size);
  @return 1 / $base;
}

/**
  * takes in an property and outputs a pixel fallback and a rem value
  */
@mixin rem-fallback($property, $pixels) {
  $number: strip-unit($pixels);
  
  #{$property}: $number + px;
  #{$property}: ($number * rem-multiplier()) + rem;
}

/**
  * takes in font-size in pixels
  * writes a rem fallback
  */
@mixin px-font-size($size) {
  $number: strip-unit($size);
  $unit: unit($size);
  
  @if $unit == "px" {
    @include rem-fallback('font-size', $size);
  } @else if $unit == 'rem' {
    font-size: (strip-unit($base-font-size) * $size) + px;
    font-size: $size;
  } @else if $unit == 'em'{
    font-size: $size;
  } @else {
    font-size-unit: assumed-pixels;
    @include rem-fallback('font-size', ($number + 'px'));
  }
}

/**
  * builds out a border property in both px and rem font size
  * takes in any number of border properties
  */
@mixin rem-fallback-border ($size, $properties...) {
  $number: strip-unit($size);
  $unit: unit($size);
  $pixels: $number + px;
  $rem: ($number * rem-multiplier()) + rem;
  
  @if $unit == '' {
    border-size-unit: assumed-pixels;
  } 
  
  @if $unit == 'rem' {
    $pixels: $number * strip-unit($base-font-size);
    $rem: $size;
  }
  
  @for $i from 1 through length($properties) {
    $pixels: $pixels + ' ' + nth($properties, $i);
    $rem: $rem + ' ' + nth($properties, $i);
  }
  
  border: $pixels;
  border: $rem;
}

// Import partials.
@import
  "base",
  "layout",
  "syntax-highlighting",
  "home",
  "nav",
  "reusable-classes",
  "art",
  "contact",
  "post",
  "work"
;

;
